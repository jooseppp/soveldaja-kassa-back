services:
  postgres:
    image: postgres:latest
    platform: linux/arm64
    container_name: kassa-postgres-primary
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: kassa
      # Replication settings
      POSTGRES_INITDB_ARGS: "--data-checksums"
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - kassa-network

  #  postgres-replica:
  #    image: postgres:latest
  #    platform: linux/arm64
  #    container_name: kassa-postgres-replica
  #    environment:
  #      POSTGRES_USER: admin
  #      POSTGRES_PASSWORD: admin
  #      POSTGRES_DB: kassa
  #      PGPASSWORD: admin
  #    command: >
  #      bash -c "
  #        # Wait for primary to be ready
  #        until PGPASSWORD=admin psql -h postgres -U admin -d kassa -c 'SELECT 1' > /dev/null 2>&1; do
  #          echo 'Waiting for primary database to be ready...'
  #          sleep 5
  #        done
  #
  #        # Stop postgres if running
  #        su postgres -c 'pg_ctl -D /var/lib/postgresql/data stop -m fast' || true
  #
  #        # Remove existing data directory if exists
  #        rm -rf /var/lib/postgresql/data/*
  #        chown postgres:postgres /var/lib/postgresql/data
  #
  #        # Initialize replica from primary
  #        su postgres -c 'PGPASSWORD=admin pg_basebackup -h postgres -U admin -D /var/lib/postgresql/data -P -X stream'
  #
  #        # Configure as replica
  #        su postgres -c 'echo \"primary_conninfo = '\''host=postgres port=5432 user=admin password=admin application_name=replica1'\''\" > /var/lib/postgresql/data/postgresql.conf'
  #        su postgres -c 'echo \"standby_mode = on\" >> /var/lib/postgresql/data/postgresql.conf'
  #        su postgres -c 'touch /var/lib/postgresql/data/standby.signal'
  #
  #        # Start postgres as postgres user
  #        su postgres -c 'postgres'
  #      "
  #    ports:
  #      - "5433:5432"
  #    volumes:
  #      - postgres-replica-data:/var/lib/postgresql/data
  #    depends_on:
  #      - postgres
  #    restart: unless-stopped
  #    networks:
  #      - kassa-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kassa-app-back
    platform: linux/arm64
    depends_on:
      - postgres
#      - postgres-replica
    environment:
      # Primary database connection
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/kassa
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      # Additional configuration for database reliability
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      # Health check configuration
      MANAGEMENT_HEALTH_DB_ENABLED: "true"
    ports:
      - "8080:8080"
    networks:
      - kassa-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# backup:
#   image: postgres:latest
#   platform: linux/arm64
#   container_name: kassa-postgres-backup
#   depends_on:
#     - postgres
#   environment:
#     POSTGRES_USER: admin
#     POSTGRES_PASSWORD: admin
#     POSTGRES_DB: kassa
#     PGHOST: postgres
#     PGPORT: 5432
#     PGPASSWORD: admin
#   volumes:
#     - postgres-backups:/backups
#   command: |
#     bash -c '
#     mkdir -p /backups
#     while true; do
#       BACKUP_FILE="/backups/kassa_backup_$$(date +%Y%m%d_%H%M%S).sql"
#       echo "Creating backup: $$BACKUP_FILE"
#       PGPASSWORD=admin pg_dump -U admin -d kassa -f $$BACKUP_FILE
#       if [ $$? -eq 0 ]; then
#         echo "Backup completed: $$BACKUP_FILE"
#         # Keep only the 10 most recent backups
#         ls -t /backups/*.sql 2>/dev/null | tail -n +11 | xargs rm -f 2>/dev/null || true
#       else
#         echo "Backup failed"
#       fi
#
#       # Wait for 1 hour before next backup
#       sleep 3600
#     done
#     '
#   restart: unless-stopped
#   networks:
#     - kassa-network

networks:
  kassa-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
# postgres-replica-data:
#   driver: local
# postgres-backups:
#   driver: local
